dataset = pd.read_csv('c:/users/srihi/Desktop/feature_extraction_data.csv', header = None)

dataset.columns = ['Age', 'MMSE','GM Vol','WM Vol','CSF Vol','Whole Brain Vol','GM/WM','GM/WB','WM/WB','CSF/WB','CDR']
print('Shape of the dataset: ' + str(dataset.shape))
print(dataset.head())

factor = pd.factorize(dataset['CDR'])
dataset.CDR = factor[0]
definitions = factor[1]
print(dataset.CDR.head())
print(definitions)

#Splitting the data into independent and dependent variables
X = dataset.iloc[:,0:10].values
y = dataset.iloc[:,10].values
print('The independent features set: ')
print(X[:5,:])
print('The dependent variable: ')
print(y[:5])

# Creating the Training and Test set from data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 21)

# Feature Scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Fitting Random Forest Classification to the Training set
classifier = RandomForestClassifier(n_estimators = 1000, criterion = 'gini', random_state =42)
classifier.fit(X_train, y_train)

# Predicting the Test set results
y_pred = classifier.predict(X_test)

reversefactor = dict(zip(range(0,5),definitions))
y_test = np.vectorize(reversefactor.get)(y_test)
y_pred = np.vectorize(reversefactor.get)(y_pred)

from sklearn.metrics import classification_report, confusion_matrix, f1_score, precision_recall_fscore_support
from sklearn.metrics import accuracy_score

print(pd.crosstab(y_test, y_pred, rownames=['Actual CDR'], colnames=['Predicted CDR']))
precision, recall, fscore, support = score(y_test, y_pred)

print('precision: {}'.format(precision))
print('recall: {}'.format(recall))
print('fscore: {}'.format(fscore))
print('support: {}'.format(support))

f1_score(y_test, y_pred, average = 'macro')

print(list(zip(dataset.columns[0:10], classifier.feature_importances_)))
joblib.dump(classifier, 'randomforestmodel.pkl')